#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Lean-master-aarch64

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: config/Lean_master/feeds_libray.sh
  DIY_P2_SH: config/Lean_master/DIY_config_aarch64.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
   
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment(初始化编译环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code(获取openwrt源码)
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --single-branch $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds(加载自定义feeds源)
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        echo $PWD
        ./scripts/feeds clean
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds(更新feeds库)
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds(安装feeds库)
      run: |
        cd openwrt
        ./scripts/feeds install -a
        sleep 1m

    - name: Load custom configuration(载入自定义config)
      env:
        CONFIG_FILE: config/Lean_master/${{matrix.target}}.config
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package(下载dl库)
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware(编译固件)
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        #make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=-$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y%m%d")" >> $GITHUB_ENV
        echo "VERSION=$(date +"%y.%m.%d.%H%M")" >> $GITHUB_ENV

    - name: Check space usage(检查磁盘空间)
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: openwrt-x86-bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files(整理文件)
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "PATH=$PWD" >> $GITHUB_ENV
        cd openwrt/bin/targets/*/* 
        cp ${{ env.PATH }}/openwrt/.config ${{matrix.target}}.config
        #cp openwrt/.config openwrt/bin/targets/*/*/${{matrix.target}}.config
        #cp openwrt/build_dir/target-*/linux-*/linux-*/.config openwrt/bin/targets/*/*/${{matrix.target}}_kernel.config
        #cd openwrt/bin/targets/*/*
        rm -rf packages
        #mkdir firmware
        #mv -f openwrt/bin/targets/*/*/{*default*,*generic*,*config*,*sha256sums*} ./firmware/ 2>/dev/null || true
        #cp openwrt/.config  ./firmware/${{matrix.target}}.config
        #cp openwrt/build_dir/target-*/linux-*/linux-*/.config ./firmware/${{matrix.target}}_kernel.config
        #cd firmware
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: openwrt-${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag(创建发布标签)
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo -e "源码来源\n" >> release.txt
        echo -e "- [Lean's OpenWrt](https://github.com/coolsnowwolf/lede)\n" >> release.txt
        echo -e "- [P3TERX's OpenWrt CI](https://github.com/P3TERX/Actions-OpenWrt)\n" >> release.txt
        echo -e "本次固件编译于$(date +"%Y.%m.%d")\n" >> release.txt
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: openwrt-${{matrix.target}}-${{env.VERSION}}
        tag_name: openwrt-${{matrix.target}}-${{ env.DATE }}
        body_path: release.txt

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 5

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
